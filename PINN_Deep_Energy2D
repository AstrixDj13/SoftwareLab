import torch
from torch.autograd import grad
import matplotlib.pyplot as plt
import math


def nnModel(input_dim, hidden_dim, output_dim):
    f1 = torch.nn.Linear(input_dim, hidden_dim)
    f2 = torch.nn.Tanh()
    f3 = torch.nn.Linear(hidden_dim, output_dim)
    model = torch.nn.Sequential(f1, f2, f3)
    return model


def getDerivative(y, x):
    dydx = grad(y, x, torch.ones_like(x), create_graph=True, retain_graph=True)[0]
    return dydx


def getDisplacement(x, model):
    z = model(x)
    u = (1 - x) * x * z  # strong enforcement of Dirichlet BCs
    return u


def getGlobalMapping(x, numGP):
    nodes = x.size(dim=0)  # number of nodes = number of training points on bar
    elements = nodes - 1
    [xi_GP, w] = getGaussianVariables(numGP)
    global_xi = torch.zeros(elements * numGP, 1)
    global_weights = torch.zeros(elements * numGP, 1)
    jacobian = torch.zeros(elements * numGP, 1)
    for el in range(elements):
        # mapping local (xi) to global (x) using linear shape functions
        A = (x[el + 1] - x[el]) * 0.5
        B = (x[el + 1] + x[el]) * 0.5
        for i in range(numGP):
            index = numGP * el + i
            global_xi[index] = A * xi_GP[i] + B
            global_weights[index] = w[i]
            jacobian[index] = A
    return [global_xi, global_weights, jacobian]


def getGaussianVariables(numGP):
    if numGP == 2:
        xi_GP = torch.tensor([-math.sqrt(1 / 3), math.sqrt(1 / 3)])
        weights = torch.tensor([1., 1.])
    if numGP == 3:
        xi_GP = torch.tensor([-math.sqrt(0.6), 0, math.sqrt(0.6)])
        weights = torch.tensor([5. / 9, 8. / 9, 5. / 9])
    return [xi_GP, weights]


def gaussianIntegration(y, weights, jacobian):
    integral = torch.sum(y * weights * jacobian)
    return integral


def getInternalEnergy(u, location, weight, jacobian, EA):
    eux = getDerivative(u[:,0], location[:,0])
    evy = getDerivative(u[:,1], location[:,1])
    euy = getDerivative(u[:,0], location[:,1])
    evx = getDerivative(u[:,1], location[:,0])
    Normal_strain_energy = (0.5 * E(location[:,0],location[:,1])/(1 - (nu(location[:,0],location[:,1])) ** 2)) * (eux ** 2 + evy ** 2 + ((2 * nu(location[:,0],location[:,1])) * eux * evy))
    Shear_strain_energy = (0.25 * E(location[:,0],location[:,1])/(1 + (nu(location[:,0],location[:,1]))))  * ((euy + evx) ** 2)
    IE_density = Normal_strain_energy + Shear_strain_energy
    int_energy = gaussianIntegration(IE_density, weight, jacobian)
    return int_energy


def getExternalEnergy(u, location, weight, jacobian, p):
    EE_density = -p(location[:,0],location[:,1]) * u(location[:,0],location[:,1])
    ext_energy = gaussianIntegration(EE_density, weight, jacobian)
    return ext_energy


def trainModel(model, EA, p, optimizer, epochs):
    numGP = 2
    [gxi, global_weights, j] = getGlobalMapping(x, numGP)
    global_xi = gxi.detach()
    global_xi.requires_grad = True
    jacobian = j.detach()
    jacobian.requires_grad = True

    for epoch in range(epochs):
        u = getDisplacement(global_xi, model)
        int_energy = getInternalEnergy(u, global_xi, global_weights, jacobian, EA)
        ext_energy = getExternalEnergy(u, global_xi, global_weights, jacobian, p)
        pot_energy = int_energy + ext_energy
        cost = pot_energy

        # Training visualization variables
        if epoch % 100 == 0:
            print(f"Epoch:{epoch} Cost:{cost.detach()}")
        costs.append(cost.detach().numpy())
        eps.append(epoch + 1)

        # Backpropagation
        optimizer.zero_grad()
        cost.backward()
        optimizer.step()


def validateModel(model, numVP):
    X = torch.linspace(0, 1, numVP, requires_grad=True).view(-1, 1)
    u = torch.sin(2 * torch.pi * X)  # analytical/actual displacements
    u_pred = getDisplacement(X, model)  # displacements predicted by PINN
    error = torch.mean((u - u_pred) ** 2)
    print(f"MSE: {error}")
    # Plots
    fig, ax = plt.subplots(1, 2)
    ax[0].set_xlabel("x")
    ax[0].set_ylabel("Displacement, u(x)")
    ax[0].plot(X.detach(), u.detach(), 'r', label='Analytical')
    ax[0].plot(X.detach(), u_pred.detach(), 'b', label='Prediction')
    ax[0].legend()
    ax[1].set_ylabel("Cost function")
    ax[1].set_xlabel("Epochs")
    ax[1].plot(eps, costs, 'g')
    plt.show()


# Model initialization and parameter selection
model = nnModel(1, 10, 1)
optimizer = torch.optim.Adam(model.parameters(), lr=0.02)

# Physical properties of bar
lengthBar = 1
E = lambda x,y: 1 + 0 * x + 0 * y
p = lambda x,y: 4 * y * torch.pi ** 2 * torch.sin(2 * torch.pi * x)
nu = lambda x,y: 1 + 0 * x + 0 * y

costs = []
eps = []

# Training
numTP = 40  # number of training points along bar
x = torch.linspace(0, lengthBar, numTP, requires_grad=True).view(-1, 1)
epochs = 500

trainModel(model, EA, p, optimizer, epochs)

# Validation
numVP = 20  # number of validation points along bar
validateModel(model, numVP)
